cmake_minimum_required(VERSION 4.0.3)
project(typeextractor VERSION 0.1.0)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

execute_process(
        COMMAND brew --prefix llvm
        OUTPUT_VARIABLE LLVM_PREFIX
        OUTPUT_STRIP_TRAILING_WHITESPACE
        RESULT_VARIABLE BREW_RESULT
)
if(NOT BREW_RESULT EQUAL 0)
        message(FATAL_ERROR "Failed to find LLVM via brew")
endif()

# https://github.com/llvm/llvm-project/blob/llvmorg-20.1.8/llvm/docs/CMake.rst#embedding-llvm-in-your-project
set(LLVM_DIR "${LLVM_PREFIX}/lib/cmake/llvm")
find_package(LLVM REQUIRED CONFIG)
# These are all generated by the above LLVM package.
link_directories(${LLVM_LIBRARY_DIRS})
add_definitions(${LLVM_DEFINITIONS})
include_directories(${LLVM_INCLUDE_DIRS})

# This isn't officially documented, but Clang's CMake files are similarly located to LLVM's.
set(Clang_DIR "${LLVM_PREFIX}/lib/cmake/clang")
find_package(Clang REQUIRED CONFIG)

# === Shared Library ===

file(GLOB_RECURSE PLUGIN_SOURCES
        ${CMAKE_CURRENT_LIST_DIR}/src/shared/*.h
        ${CMAKE_CURRENT_LIST_DIR}/src/shared/*.cpp
)
add_library(shared STATIC ${PLUGIN_SOURCES})

target_link_libraries(shared PRIVATE
        clangAST
        clangFrontend
)

target_include_directories(shared
        PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/src/shared/include>
)

set_target_properties(shared PROPERTIES OUTPUT_NAME action)


# === Clang Plugin ===

file(GLOB_RECURSE PLUGIN_SOURCES
        ${CMAKE_CURRENT_LIST_DIR}/src/clang-plugin/*.h
        ${CMAKE_CURRENT_LIST_DIR}/src/clang-plugin/*.cpp
)
add_library(clang-plugin MODULE ${PLUGIN_SOURCES})

target_link_libraries(clang-plugin PRIVATE
        shared
        clangFrontend
)

set_target_properties(clang-plugin PROPERTIES OUTPUT_NAME te)

# === Executable ===

file(GLOB_RECURSE BINARY_SOURCES
        ${CMAKE_CURRENT_LIST_DIR}/src/executable/*.h
        ${CMAKE_CURRENT_LIST_DIR}/src/executable/*.cpp
)

add_executable(executable ${BINARY_SOURCES})

target_link_libraries(executable PRIVATE
        shared
        clangAST
        clangFrontend
        clangTooling
)
set_target_properties(executable PROPERTIES OUTPUT_NAME te)
